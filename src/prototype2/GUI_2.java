/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prototype2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import sampleData.Sample;

/**

 @author John
 */
public final class GUI_2 extends javax.swing.JFrame implements ListSelectionListener
{
   private enum Numbers { SITE_NAME, SITE_CODE, COLLECTION_D, COLLECTORS,
   CROSSDATERS, NUM_SAMPLES, SPECIES_NAME, COMMON_NAME, HABITAT_TYPE, COUNTRY,
   STATE, COUNTY, PARK_MONUM, NATION_FOREST, RANGER_DIST, TOWNSHIP, RANGE,
   SECTION, QUART_SECTION, UTM_EAS, UTM_NOR, LATITUDE, LONGITUDE, TOPO_MAP,
   LOWEST_ELE, HIGEST_ELE, SLOPE, ASPECT, AREA_SAMP, SUBSTR_TYPE};
   File file;
   FileReader fileReader;
   BufferedReader bufferedReader;
   FileWriter fileWriter;
   BufferedWriter bufferedWriter;
   private final JFileChooser fileChoose;
   private final int HEADER_LINES = 30;
   private final int AFTER_HEADER = 31;
   private final int FORMAT_INCR = 3;
   private final int CHAR_LENGTH = 2;
   private final int INC_START = 1;
   private Sample samples[];
   private int previousSelect;
   /**
    Creates new form GUI_2
    */
   public GUI_2()
   {
      initComponents();
      fileChoose = new javax.swing.JFileChooser();
      WarningLabel.setVisible(false);
      setResizable(false);
      fileChoose.addChoosableFileFilter(new FHKFilter());
      fileChoose.setAcceptAllFileFilterUsed(false);
      SetupComboBox();
      SampleTable.getSelectionModel().addListSelectionListener((ListSelectionListener)this);
   }
   @Override
   public void valueChanged(ListSelectionEvent event) 
   {
       int yearSpan = Integer.parseInt(EndYearInput.getText()) - Integer.parseInt(StartYearInput.getText()) + 1;
       char newData[] = new char[yearSpan];
       for(int i = 0; i < yearSpan; i++ )
       {
           newData[i] = (char)InfoTable.getValueAt(i, 2);
       }
       samples[previousSelect].setNewData(newData);
       infoTableFill(SampleTable.getSelectedRow());
       previousSelect = SampleTable.getSelectedRow();

   }
   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jTabbedPane1 = new javax.swing.JTabbedPane();
      jPanel2 = new javax.swing.JPanel();
      siteName = new javax.swing.JTextField();
      siteCode = new javax.swing.JTextField();
      collectors = new javax.swing.JTextField();
      collectionDate = new javax.swing.JTextField();
      crossdaters = new javax.swing.JTextField();
      speciesName = new javax.swing.JTextField();
      commonName = new javax.swing.JTextField();
      habitatType = new javax.swing.JTextField();
      country = new javax.swing.JTextField();
      state = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      jLabel13 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();
      utmNorthing = new javax.swing.JTextField();
      jLabel18 = new javax.swing.JLabel();
      jLabel19 = new javax.swing.JLabel();
      county = new javax.swing.JTextField();
      parkMonument = new javax.swing.JTextField();
      jLabel21 = new javax.swing.JLabel();
      rangerDistrict = new javax.swing.JTextField();
      jLabel23 = new javax.swing.JLabel();
      nationalForest = new javax.swing.JTextField();
      jLabel24 = new javax.swing.JLabel();
      township = new javax.swing.JTextField();
      jLabel25 = new javax.swing.JLabel();
      range = new javax.swing.JTextField();
      jLabel26 = new javax.swing.JLabel();
      section = new javax.swing.JTextField();
      jLabel27 = new javax.swing.JLabel();
      quarterSection = new javax.swing.JTextField();
      jLabel28 = new javax.swing.JLabel();
      utmEasting = new javax.swing.JTextField();
      highestElevation = new javax.swing.JTextField();
      jLabel29 = new javax.swing.JLabel();
      slope = new javax.swing.JTextField();
      jLabel30 = new javax.swing.JLabel();
      aspect = new javax.swing.JTextField();
      jLabel31 = new javax.swing.JLabel();
      areaSampled = new javax.swing.JTextField();
      jLabel20 = new javax.swing.JLabel();
      jLabel32 = new javax.swing.JLabel();
      substrateType = new javax.swing.JTextField();
      jLabel22 = new javax.swing.JLabel();
      latitude = new javax.swing.JTextField();
      longitude = new javax.swing.JTextField();
      jLabel34 = new javax.swing.JLabel();
      lowestElevation = new javax.swing.JTextField();
      jLabel35 = new javax.swing.JLabel();
      topographicMap = new javax.swing.JTextField();
      jLabel36 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      comments = new javax.swing.JTextArea();
      jPanel1 = new javax.swing.JPanel();
      jLabel5 = new javax.swing.JLabel();
      WarningLabel = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jScrollPane3 = new javax.swing.JScrollPane();
      InfoTable = new javax.swing.JTable();
      StartYearInput = new java.awt.TextField();
      jLabel2 = new javax.swing.JLabel();
      jLabel1 = new javax.swing.JLabel();
      EndYearInput = new java.awt.TextField();
      jScrollPane4 = new javax.swing.JScrollPane();
      SampleTable = new javax.swing.JTable();
      jButton1 = new javax.swing.JButton();
      jLabel16 = new javax.swing.JLabel();
      sampleIDLength = new javax.swing.JTextField();
      SampleNumberInput = new javax.swing.JTextField();
      currentEdit = new javax.swing.JLabel();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu2 = new javax.swing.JMenu();
      newFileOption = new javax.swing.JMenuItem();
      loadFileOption = new javax.swing.JMenuItem();
      saveFileOption = new javax.swing.JMenuItem();
      exitOption = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jLabel3.setText("Site Name");

      jLabel6.setText("Site Code");

      jLabel7.setText("Collection Date");

      jLabel8.setText("Collectors");

      jLabel9.setText("Crossdaters");

      jLabel10.setText("Species Name");

      jLabel11.setText("Common Name");

      jLabel12.setText("Habitat Type");

      jLabel13.setText("Country");

      jLabel14.setText("State");

      jLabel17.setText("Quarter Section");

      jLabel18.setText("UTM Easting");

      jLabel19.setText("UTM Northing");

      jLabel21.setText("County");

      jLabel23.setText("Park/Monument");

      jLabel24.setText("National Forest");

      jLabel25.setText("Ranger District");

      jLabel26.setText("Township");

      jLabel27.setText("Range");

      jLabel28.setText("Section");

      jLabel29.setText("Lowest Elevation");

      jLabel30.setText("Highest Elevation");

      jLabel31.setText("Slope");

      jLabel20.setText("Area Sampled");

      jLabel32.setText("Aspect");

      jLabel22.setText("Substrate Type");

      jLabel34.setText("Latitude");

      jLabel35.setText("Longitude");

      jLabel36.setText("Topographic Map");

      jLabel15.setText("Comments");

      comments.setColumns(20);
      comments.setRows(5);
      jScrollPane1.setViewportView(comments);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
               .addComponent(jScrollPane1)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11)
                        .addComponent(jLabel12)
                        .addComponent(jLabel13)
                        .addComponent(jLabel14))
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(collectionDate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(siteName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(siteCode, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(collectors, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(crossdaters, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(speciesName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(commonName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(habitatType, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGap(18, 18, 18)
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel21)
                        .addComponent(jLabel23)
                        .addComponent(jLabel24)
                        .addComponent(jLabel25)
                        .addComponent(jLabel26)
                        .addComponent(jLabel27)
                        .addComponent(jLabel28)
                        .addComponent(jLabel17)
                        .addComponent(jLabel18)
                        .addComponent(jLabel19))
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(utmNorthing, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                           .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(nationalForest, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(county, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(parkMonument, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(rangerDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(township, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(range, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(section, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(quarterSection, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(utmEasting, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGap(18, 18, 18)
                           .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                              .addComponent(jLabel34)
                              .addComponent(jLabel35)
                              .addComponent(jLabel36)
                              .addComponent(jLabel29)
                              .addComponent(jLabel30)
                              .addComponent(jLabel31)
                              .addComponent(jLabel32)
                              .addComponent(jLabel20)
                              .addComponent(jLabel22))
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                           .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(topographicMap, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(latitude, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(longitude, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(lowestElevation, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(highestElevation, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(slope, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(aspect, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(areaSampled, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(substrateType, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                  .addComponent(jLabel15)))
            .addContainerGap(59, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(siteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel3))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(siteCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel6))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(collectionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel7))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(collectors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel8))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(crossdaters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel9))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(speciesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel10))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(commonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel11))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(habitatType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel12))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel13))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel14)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(county, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(parkMonument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(nationalForest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(rangerDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(township, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(section, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel28))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(quarterSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(utmEasting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel18)))
                     .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(latitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(longitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel35))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(topographicMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel36))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(lowestElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(highestElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(slope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(aspect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel32))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(areaSampled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(substrateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel22))))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(utmNorthing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel19))))
            .addGap(18, 18, 18)
            .addComponent(jLabel15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addContainerGap())
      );

      jTabbedPane1.addTab("File Meta Data", jPanel2);

      jLabel5.setText("Number of Samples");

      WarningLabel.setText("ERROR");
      WarningLabel.setEnabled(false);

      jLabel4.setText("Sample Information");

      jScrollPane3.setName(""); // NOI18N

      InfoTable.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][]
         {

         },
         new String []
         {
            "Year", "Event ", "New Event "
         }
      )
      {
         boolean[] canEdit = new boolean []
         {
            false, false, true
         };

         public boolean isCellEditable(int rowIndex, int columnIndex)
         {
            return canEdit [columnIndex];
         }
      });
      jScrollPane3.setViewportView(InfoTable);

      StartYearInput.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            StartYearInputActionPerformed(evt);
         }
      });

      jLabel2.setText("Starting Year");

      jLabel1.setText("Ending Year");

      EndYearInput.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            EndYearInputActionPerformed(evt);
         }
      });

      SampleTable.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][]
         {

         },
         new String []
         {
            "Sample Name"
         }
      ));
      jScrollPane4.setViewportView(SampleTable);

      jButton1.setText("Set Up");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1ActionPerformed(evt);
         }
      });

      jLabel16.setText("Sample ID Length");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(WarningLabel)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel16)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel2)
                           .addComponent(StartYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel1)
                           .addComponent(EndYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addComponent(sampleIDLength, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(21, 21, 21)
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(SampleNumberInput)
                     .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(149, 149, 149)
                  .addComponent(jLabel4))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jButton1)
                  .addGap(18, 18, 18)
                  .addComponent(currentEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(26, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel5)
            .addGap(3, 3, 3)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(SampleNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(1, 1, 1)
            .addComponent(WarningLabel)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGap(20, 20, 20)
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel2)
                     .addComponent(jLabel1))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(StartYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(EndYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabel16)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(sampleIDLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jButton1)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                  .addComponent(currentEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)))
            .addContainerGap(26, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Sample Data", jPanel1);

      jMenu2.setText("File");

      newFileOption.setText("New File");
      newFileOption.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            newFileOptionActionPerformed(evt);
         }
      });
      jMenu2.add(newFileOption);

      loadFileOption.setText("Load File");
      loadFileOption.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            loadFileOptionActionPerformed(evt);
         }
      });
      jMenu2.add(loadFileOption);

      saveFileOption.setText("Save File");
      saveFileOption.addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mouseClicked(java.awt.event.MouseEvent evt)
         {
            saveFileOptionMouseClicked(evt);
         }
      });
      saveFileOption.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            saveFileOptionActionPerformed(evt);
         }
      });
      jMenu2.add(saveFileOption);

      exitOption.setText("Exit");
      exitOption.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            exitOptionActionPerformed(evt);
         }
      });
      jMenu2.add(exitOption);

      jMenuBar1.add(jMenu2);

      setJMenuBar(jMenuBar1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void newFileOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newFileOptionActionPerformed
   {//GEN-HEADEREND:event_newFileOptionActionPerformed
      int returnVal = fileChoose.showSaveDialog(GUI_2.this);
      if(returnVal == JFileChooser.APPROVE_OPTION)
      {
         file = fileChoose.getSelectedFile(); //this will save the .FHX file path?
         String file_name = file.toString();
         if (!file_name.endsWith(".FHX"))
         {
            file_name += ".FHX";
         }
         file = new File(file_name);
         try
         {
            file.createNewFile();//create the file in the folder selected
         }
         catch (IOException ex)
         {
            System.out.println("Oops");
         }
      }
   }//GEN-LAST:event_newFileOptionActionPerformed

   private void loadFileOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadFileOptionActionPerformed
   {//GEN-HEADEREND:event_loadFileOptionActionPerformed
      int returnVal = fileChoose.showOpenDialog(GUI_2.this);

      if(returnVal == JFileChooser.APPROVE_OPTION)
      {
         file = fileChoose.getSelectedFile();  //this will load the .FHX file
         load(file);//load the table based on the file
      }
   }//GEN-LAST:event_loadFileOptionActionPerformed

   private void saveFileOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveFileOptionActionPerformed
   {//GEN-HEADEREND:event_saveFileOptionActionPerformed
      //saves changes to the .FHX file based on the table
      newFileOptionActionPerformed(evt);
      save(file);
   }//GEN-LAST:event_saveFileOptionActionPerformed

   private void exitOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitOptionActionPerformed
   {//GEN-HEADEREND:event_exitOptionActionPerformed
      System.exit(0);
   }//GEN-LAST:event_exitOptionActionPerformed

   private void EndYearInputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_EndYearInputActionPerformed
   {//GEN-HEADEREND:event_EndYearInputActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_EndYearInputActionPerformed

   private void StartYearInputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_StartYearInputActionPerformed
   {//GEN-HEADEREND:event_StartYearInputActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_StartYearInputActionPerformed

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
   {//GEN-HEADEREND:event_jButton1ActionPerformed
      // TODO add your handling code here:
      int Start, End, SampleNum;
      WarningLabel.setVisible(false);
      if(!SampleNumberInput.getText().isEmpty() &&
         !StartYearInput.getText().isEmpty() &&
         !EndYearInput.getText().isEmpty())
      {
         if(SampleNumberInput.getText().matches("^-?\\d+$") &&
            EndYearInput.getText().matches("^-?\\d+$") &&
            StartYearInput.getText().matches("^-?\\d+$") &&
            Integer.parseInt(StartYearInput.getText()) > 0 &&
            Integer.parseInt(EndYearInput.getText()) > 0 &&
            Integer.parseInt(SampleNumberInput.getText()) > 0)
         {
            Start = Integer.parseInt(StartYearInput.getText());
            End = Integer.parseInt(EndYearInput.getText());
            SampleNum = Integer.parseInt(SampleNumberInput.getText());
            DefaultTableModel dtm = (DefaultTableModel) InfoTable.getModel();
            DefaultTableModel dtm2 = (DefaultTableModel) SampleTable.getModel();
            if((End - Start) >= 0 )
            {
               dtm.setRowCount((End - Start) + 1 );
            }
            else
            {
               WarningLabel.setVisible(true);
               WarningLabel.setText("Cannot have ending year before starting year.");
            }
            InfoTable.setModel(dtm);
            dtm2.setRowCount(SampleNum);
            SampleTable.setModel(dtm2);
            for (int x = 1; x <= SampleNum; x++)
            {
               String SampleId = "T" + x;
               SampleTable.setValueAt(SampleId, x - 1, 0);
            }
            for (int x = Start; x <= End; x++)
            {
               InfoTable.setValueAt(x, x - Start, 0);
               InfoTable.setValueAt('.', x - Start, 1);
               InfoTable.setValueAt('.', x - Start, 2);
            }
            int yearSpan = End - Start + 1;
            char sampleValue[] = new char[yearSpan];
            for(int i = 0; i < yearSpan; i++)
                sampleValue[i] = '.';
            samples = new Sample[SampleNum];
            for (int i = 0; i < SampleNum; i++) 
            {
                samples[i] = new Sample(yearSpan,
                        (SampleTable.getValueAt(i, 0)).toString());
                samples[i].setOldData(sampleValue);
                samples[i].setNewData(sampleValue);
            }
         }
         else
         {
            WarningLabel.setText("Please enter valid inputs.");
            WarningLabel.setVisible(true);
         }
      }   }//GEN-LAST:event_jButton1ActionPerformed

   private void saveFileOptionMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_saveFileOptionMouseClicked
   {//GEN-HEADEREND:event_saveFileOptionMouseClicked

   }//GEN-LAST:event_saveFileOptionMouseClicked

   private void load(File f)
   {
      try
      {
         String splitStr;
         String temp[];
         String toKeep;
         List<String> list;
         currentEdit.setText("Currently editing: " + f.getName());
         list = Files.readAllLines(f.toPath());
         for(int i = 0; i < HEADER_LINES; i++)
         {
            toKeep = "";
            splitStr = list.get(i);
            temp = splitStr.split(": ");
            for(int j = 1; j < temp.length; j++)
               toKeep += temp[j];
            list.set(i, toKeep);
         }         
         headerFill(list);        
         int start = AFTER_HEADER;
         start = commentFill(list, start);
         start = dataFill(list, start);
         sampleTableFill(list, start);
         infoTableFill(0);
         previousSelect = 0;
      }
      catch (Exception e)
      {
         System.out.println("Oh no " + e.toString());
      }
      this.SampleTable.setRowSelectionInterval(0, 0);
   }
   
    private void infoTableFill(int selection) 
    {
        char oldValue[];
        char newValue[];
        int charCounter = 0;
        for (int x = Integer.parseInt(StartYearInput.getText()); x <= Integer.parseInt(EndYearInput.getText()); x++) 
        {

            oldValue = samples[selection].getOldData();
            newValue = samples[selection].getNewData();
            InfoTable.setValueAt(x, x - Integer.parseInt(StartYearInput.getText()), 0);
            InfoTable.setValueAt(oldValue[charCounter],
                    x - Integer.parseInt(StartYearInput.getText()), 1);
            InfoTable.setValueAt(newValue[charCounter],
                    x - Integer.parseInt(StartYearInput.getText()), 2);
            charCounter++;
        }
    }
   private void headerFill(List<String> list)
   {
       siteName.setText(list.get(Numbers.SITE_NAME.ordinal()));
       siteCode.setText(list.get(Numbers.SITE_CODE.ordinal()));
       collectionDate.setText(list.get(Numbers.COLLECTION_D.ordinal()));
       collectors.setText(list.get(Numbers.COLLECTORS.ordinal()));
       crossdaters.setText(list.get(Numbers.CROSSDATERS.ordinal()));
       SampleNumberInput.setText(list.get(Numbers.NUM_SAMPLES.ordinal()));
       speciesName.setText(list.get(Numbers.SPECIES_NAME.ordinal()));
       commonName.setText(list.get(Numbers.COMMON_NAME.ordinal()));
       habitatType.setText(list.get(Numbers.HABITAT_TYPE.ordinal()));
       country.setText(list.get(Numbers.COUNTRY.ordinal()));
       state.setText(list.get(Numbers.STATE.ordinal()));
       county.setText(list.get(Numbers.COUNTY.ordinal()));
       parkMonument.setText(list.get(Numbers.PARK_MONUM.ordinal()));
       nationalForest.setText(list.get(Numbers.NATION_FOREST.ordinal()));
       rangerDistrict.setText(list.get(Numbers.RANGER_DIST.ordinal()));
       township.setText(list.get(Numbers.TOWNSHIP.ordinal()));
       range.setText(list.get(Numbers.RANGE.ordinal()));
       section.setText(list.get(Numbers.SECTION.ordinal()));
       quarterSection.setText(list.get(Numbers.QUART_SECTION.ordinal()));
       utmEasting.setText(list.get(Numbers.UTM_EAS.ordinal()));
       utmNorthing.setText(list.get(Numbers.UTM_NOR.ordinal()));
       latitude.setText(list.get(Numbers.LATITUDE.ordinal()));
       longitude.setText(list.get(Numbers.LONGITUDE.ordinal()));
       topographicMap.setText(list.get(Numbers.TOPO_MAP.ordinal()));
       lowestElevation.setText(list.get(Numbers.LOWEST_ELE.ordinal()));
       highestElevation.setText(list.get(Numbers.HIGEST_ELE.ordinal()));
       slope.setText(list.get(Numbers.SLOPE.ordinal()));
       aspect.setText(list.get(Numbers.ASPECT.ordinal()));
       areaSampled.setText(list.get(Numbers.AREA_SAMP.ordinal()));
       substrateType.setText(list.get(Numbers.SUBSTR_TYPE.ordinal()));       
   }
   private int commentFill(List<String> list, int start)
   {
       String comment = "";
       while(!list.get(start).equals("End comments ABOVE this line."))
       {
          comment += (list.get(start) + "\n");
          start++;
       }
       comments.setText(comment);
       return start;
   }
   
   private int dataFill(List<String> list, int start)
   {
       start += FORMAT_INCR;
       String splitStr = list.get(start);
       String temp[] = splitStr.split(" ");
       StartYearInput.setText(temp[0]);
       sampleIDLength.setText(temp[2]);
       int charLength = Integer.parseInt(temp[CHAR_LENGTH]);
       int SampleNum = Integer.parseInt(SampleNumberInput.getText());
       DefaultTableModel dtm2 = (DefaultTableModel) SampleTable.getModel();
       dtm2.setRowCount(SampleNum);
       SampleTable.setModel(dtm2);
       start++;
       List<String> sampleNameList = new ArrayList<>();
       for(int i = 0; i < SampleNum; i++)
           sampleNameList.add("");
       String newName = "";
       for (int i = 0; i < charLength; i++)
       {
           for (int j = 0; j < SampleNum; j++)
           {
               newName = sampleNameList.get(j);
               newName += list.get(start).charAt(j);
               sampleNameList.set(j, newName);
           }
           start++;
       }
       for (int i = 0; i < SampleNum; i++)
           SampleTable.setValueAt(sampleNameList.get(i), i, 0);
       splitStr = list.get(list.size() - 1);
       temp = splitStr.split(" ");
       EndYearInput.setText(temp[1]);
       start += INC_START;   
       return start;
   }
   
   private void sampleTableFill(List<String> list, int start)
   {
       String splitStr;
       String temp[];
       int SampleNum = Integer.parseInt(SampleNumberInput.getText());
       int yearSpan = Integer.parseInt(EndYearInput.getText())
               - Integer.parseInt(StartYearInput.getText()) + 1;
       char sampleValue[][] = new char[SampleNum][yearSpan];
       for (int i = 0; i < yearSpan; i++) 
       {
           splitStr = list.get(start);
           temp = splitStr.split(" ");
           for (int j = 0; j < SampleNum; j++) 
           {
               sampleValue[j][i] = temp[0].charAt(j);
           }
           start++;
       }
       samples = new Sample[SampleNum];
       DefaultTableModel dtm = (DefaultTableModel) InfoTable.getModel();
       dtm.setRowCount(yearSpan);
       InfoTable.setModel(dtm);
       for (int i = 0; i < SampleNum; i++) 
       {
           samples[i] = new Sample(yearSpan,
                   (SampleTable.getValueAt(i, 0)).toString());
           samples[i].setOldData(sampleValue[i]);
           samples[i].setNewData(sampleValue[i]);
       }    
   }
   
   private void save(File f)
   {
      String input = "";
      currentEdit.setText("Currently editing: " + f.getName());
      try
      {
         PrintStream outF = new PrintStream(new FileOutputStream(f.getPath()));

         outF.println("Name of site   : " + siteName.getText());
         outF.println("Site code      : " + siteCode.getText());
         outF.println("Collection date: " + collectionDate.getText());
         outF.println("Collectors     : " + collectors.getText());
         outF.println("Crossdaters    : " + crossdaters.getText());
         outF.println("Number samples : " + SampleNumberInput.getText());
         outF.println("Species name   : " + speciesName.getText());
         outF.println("Common name    : " + commonName.getText());
         outF.println("Habitat name   : " + habitatType.getText());
         outF.println("Country        : " + country.getText());
         outF.println("State          : " + state.getText());
         outF.println("County         : " + county.getText());
         outF.println("Park/Monument  : " + parkMonument.getText());
         outF.println("National Forest: " + nationalForest.getText());
         outF.println("Ranger district: " + rangerDistrict.getText());
         outF.println("Township       : " + township.getText());
         outF.println("Range          : " + range.getText());
         outF.println("Section        : " + section.getText());
         outF.println("Quarter section: " + quarterSection.getText());
         outF.println("UTM easting    : " + utmEasting.getText());
         outF.println("UTM northing   : " + utmNorthing.getText());
         outF.println("Latitude       : " + latitude.getText());
         outF.println("Longitude      : " + longitude.getText());
         outF.println("Topographic map: " + topographicMap.getText());
         outF.println("Lowest elev    : " + lowestElevation.getText());
         outF.println("Highest elev   : " + highestElevation.getText());
         outF.println("Slope          : " + slope.getText());
         outF.println("Aspect         : " + aspect.getText());
         outF.println("Area sampled   : " + areaSampled.getText());
         outF.println("Substrate type : " + substrateType.getText());
         outF.println("Begin comments BELOW this line:" + '\n' + comments.getText());

         outF.println("End comments ABOVE this line.");
         outF.println("");
         outF.println("FHX2 FORMAT");
         int idLen = Integer.parseInt(sampleIDLength.getText());
         outF.println(StartYearInput.getText() + " " + 
               SampleNumberInput.getText() + " " + idLen);

         for (int i = 0; i < idLen; i++)
         //inside is replaced with a string created of the 
         {
            for (int j = 0; j < SampleTable.getRowCount(); j++)
            {
                  if (i < SampleTable.getValueAt(j, 0).toString().length())
                     outF.print(SampleTable.getValueAt(j, 0).toString().charAt(i));
                  else
                     outF.print(" ");
            }
            outF.println("");
         }

         outF.println("");
         int yearsRun  = Integer.parseInt(EndYearInput.getText()) + 1 - 
               Integer.parseInt(StartYearInput.getText());
       char newData[] = new char[yearsRun];
       for(int i = 0; i < yearsRun; i++ )
       {
           newData[i] = (char)InfoTable.getValueAt(i, 2);
       }
       samples[SampleTable.getSelectedRow()].setNewData(newData);
         for (int i = 0; i < yearsRun; i++)
         {
            for (int j = 0; j < Integer.parseInt(SampleNumberInput.getText());
                  j++)
            {
               outF.print((samples[j].getNewData())[i]); 
            }
            outF.println(" " + (Integer.parseInt(StartYearInput.getText()) 
                  + i));
         }
      }
      catch (IOException ex)
      {
         System.out.println("file error: " + ex);
      }
      catch (NumberFormatException ex)
      {
         System.out.println("error: " + ex);
      }
   }
   void SetupComboBox()
   {
      TableColumn  NewColumn = InfoTable.getColumnModel().getColumn(2);
      TableColumn  SavedColumn = InfoTable.getColumnModel().getColumn(1);
      JComboBox comboBox = new JComboBox();
      comboBox.addItem('{');
      comboBox.addItem('}');
      comboBox.addItem('[');
      comboBox.addItem(']');
      comboBox.addItem('|'); 
      comboBox.addItem('.');
      comboBox.addItem('D');
      comboBox.addItem('d');
      comboBox.addItem('M');
      comboBox.addItem('m');      
      comboBox.addItem('U');    
      comboBox.addItem('u');  
      comboBox.addItem('E'); 
      comboBox.addItem('e');
      comboBox.addItem('L');
      comboBox.addItem('l');      
      comboBox.addItem('A');
      comboBox.addItem('a');      
      NewColumn.setCellEditor(new DefaultCellEditor(comboBox));
      DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
      NewColumn.setCellRenderer(renderer);
      SavedColumn.setCellEditor(new DefaultCellEditor(comboBox));
      SavedColumn.setCellRenderer(renderer);
   };
   
   /**
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new GUI_2().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private java.awt.TextField EndYearInput;
   private javax.swing.JTable InfoTable;
   private javax.swing.JTextField SampleNumberInput;
   private javax.swing.JTable SampleTable;
   private java.awt.TextField StartYearInput;
   private javax.swing.JLabel WarningLabel;
   private javax.swing.JTextField areaSampled;
   private javax.swing.JTextField aspect;
   private javax.swing.JTextField collectionDate;
   private javax.swing.JTextField collectors;
   private javax.swing.JTextArea comments;
   private javax.swing.JTextField commonName;
   private javax.swing.JTextField country;
   private javax.swing.JTextField county;
   private javax.swing.JTextField crossdaters;
   private javax.swing.JLabel currentEdit;
   private javax.swing.JMenuItem exitOption;
   private javax.swing.JTextField habitatType;
   private javax.swing.JTextField highestElevation;
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel20;
   private javax.swing.JLabel jLabel21;
   private javax.swing.JLabel jLabel22;
   private javax.swing.JLabel jLabel23;
   private javax.swing.JLabel jLabel24;
   private javax.swing.JLabel jLabel25;
   private javax.swing.JLabel jLabel26;
   private javax.swing.JLabel jLabel27;
   private javax.swing.JLabel jLabel28;
   private javax.swing.JLabel jLabel29;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel30;
   private javax.swing.JLabel jLabel31;
   private javax.swing.JLabel jLabel32;
   private javax.swing.JLabel jLabel34;
   private javax.swing.JLabel jLabel35;
   private javax.swing.JLabel jLabel36;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JScrollPane jScrollPane4;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JTextField latitude;
   private javax.swing.JMenuItem loadFileOption;
   private javax.swing.JTextField longitude;
   private javax.swing.JTextField lowestElevation;
   private javax.swing.JTextField nationalForest;
   private javax.swing.JMenuItem newFileOption;
   private javax.swing.JTextField parkMonument;
   private javax.swing.JTextField quarterSection;
   private javax.swing.JTextField range;
   private javax.swing.JTextField rangerDistrict;
   private javax.swing.JTextField sampleIDLength;
   private javax.swing.JMenuItem saveFileOption;
   private javax.swing.JTextField section;
   private javax.swing.JTextField siteCode;
   private javax.swing.JTextField siteName;
   private javax.swing.JTextField slope;
   private javax.swing.JTextField speciesName;
   private javax.swing.JTextField state;
   private javax.swing.JTextField substrateType;
   private javax.swing.JTextField topographicMap;
   private javax.swing.JTextField township;
   private javax.swing.JTextField utmEasting;
   private javax.swing.JTextField utmNorthing;
   // End of variables declaration//GEN-END:variables
}
